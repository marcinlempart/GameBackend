trigger:
  branches:
    include:
      - main

variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  azureSubscription: "GameBackendServiceConnection"
  artifactName: "drop"
  terraformWorkingDir: "Terraform"
  packagePath: "$(System.ArtifactsDirectory)/$(artifactName)/publish"

stages:
  # ===================================
  # 1Ô∏è‚É£ BUILD & TEST .NET APLIKACJI (Windows)
  # ===================================
  - stage: Build
    displayName: "Build and Test Application"
    jobs:
      - job: BuildApp
        displayName: "Build .NET App"
        pool:
          vmImage: "windows-latest"
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: $(solution)

          - task: VSBuild@1
            inputs:
              solution: $(solution)
              msbuildArgs: >
                /p:DeployOnBuild=true
                /p:PublishProfile=FolderProfile
                /p:WebPublishMethod=FileSystem
                /p:PublishUrl="$(build.artifactStagingDirectory)/publish"
                /p:DeployDefaultTarget=WebPublish
              platform: $(buildPlatform)
              configuration: $(buildConfiguration)

          - task: VSTest@2
            inputs:
              platform: $(buildPlatform)
              configuration: $(buildConfiguration)

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(build.artifactStagingDirectory)
              ArtifactName: $(artifactName)

  # ===================================
  # 2Ô∏è‚É£ PROVISION INFRA Z TERRAFORM (Linux)
  # ===================================
  - stage: Infrastructure
    displayName: "Provision Infrastructure with Terraform"
    dependsOn: Build
    jobs:
      - job: TerraformApply
        displayName: "Terraform Apply"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              echo "Installing Terraform..."
              sudo apt-get update && sudo apt-get install -y unzip wget
              wget https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip
              unzip terraform_1.7.5_linux_amd64.zip
              sudo mv terraform /usr/local/bin/
              terraform -version
            displayName: "Install Terraform"

          - task: AzureCLI@2
            displayName: "Terraform Init, Import & Apply"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformWorkingDir)
              inlineScript: |
                echo "Initializing Terraform..."
                terraform init

                echo "Importing existing resources if they exist..."

                # Import Resource Group
                terraform import azurerm_resource_group.rg /subscriptions/171eb711-b76d-49e7-a653-d91675596edb/resourceGroups/rg-game-backend || echo "Resource Group import failed or already exists"

                # Import Service Plan
                terraform import azurerm_service_plan.app_plan /subscriptions/171eb711-b76d-49e7-a653-d91675596edb/resourceGroups/rg-game-backend/providers/Microsoft.Web/serverFarms/game-backend-app-plan || echo "Service Plan import failed or already exists"

                # Import Windows Web App
                terraform import azurerm_windows_web_app.app_service /subscriptions/171eb711-b76d-49e7-a653-d91675596edb/resourceGroups/rg-game-backend/providers/Microsoft.Web/sites/game-backend-app || echo "Web App import failed or already exists"

                # Import Application Insights
                terraform import azurerm_application_insights.app_insights /subscriptions/171eb711-b76d-49e7-a653-d91675596edb/resourceGroups/rg-game-backend/providers/Microsoft.Insights/components/game-backend-app-insights || echo "App Insights import failed or already exists"

                echo "Planning Terraform..."
                terraform plan -out=tfplan

                echo "Applying Terraform..."
                terraform apply -auto-approve tfplan

  # ===================================
  # 3Ô∏è‚É£ DEPLOY DO AZURE APP SERVICE (Linux)
  # ===================================
  - stage: Deploy
    displayName: "Deploy Application to Azure App Service"
    dependsOn: Infrastructure
    jobs:
      - job: DeployWebApp
        displayName: "Deploy Web App"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: current
              downloadType: single
              artifactName: $(artifactName)
              downloadPath: $(System.ArtifactsDirectory)

          - script: |
              echo "=== DEBUG: Checking artifacts ==="
              echo "ArtifactsDirectory: $(System.ArtifactsDirectory)"
              echo "PackagePath: $(packagePath)"
              echo "Listing all files:"
              find $(System.ArtifactsDirectory) -type f -name "*" | head -20
              echo "Looking for publish folder:"
              find $(System.ArtifactsDirectory) -name "publish" -type d
              echo "Contents of publish folder:"
              find $(System.ArtifactsDirectory) -name "publish" -type d -exec ls -la {} \;
            displayName: "Debug: List artifacts"

          - task: AzureRmWebAppDeployment@4
            displayName: "Deploy App to Azure App Service"
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webApp
              WebAppName: "game-backend-app"
              Package: $(packagePath)

          - task: AzureCLI@2
            displayName: "Verify Deployment"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Verifying deployment..."
                APP_URL=$(az webapp show --name "game-backend-app" --resource-group "rg-game-backend" --query defaultHostName --output tsv)
                echo "Application URL: https://$APP_URL"
                echo "Testing endpoint..."
                curl -I "https://$APP_URL" || echo "App might still be starting up"

                echo "=== Deployment Summary ==="
                echo "‚úÖ Infrastructure: Managed by Terraform"
                echo "‚úÖ Application: Deployed to App Service"
                echo "‚úÖ Monitoring: Application Insights configured"
                echo "üåê Access your app at: https://$APP_URL"
