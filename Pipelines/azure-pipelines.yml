trigger:
  branches:
    include:
      - main
variables:
  - group: tf-alerts-prod

  - name: solution
    value: "**/*.sln"
  - name: buildPlatform
    value: "Any CPU"
  - name: buildConfiguration
    value: "Release"
  - name: azureSubscription
    value: "GameBackendServiceConnection"
  - name: artifactName
    value: "drop"
  - name: terraformWorkingDir
    value: "Terraform"
  - name: packagePath
    value: "$(System.ArtifactsDirectory)/$(artifactName)/publish"
stages:
  # ===================================
  # 1Ô∏è‚É£ BUILD & TEST .NET APLIKACJI (Windows)
  # ===================================
  - stage: Build
    displayName: "Build and Test Application"
    jobs:
      - job: BuildApp
        displayName: "Build .NET App"
        pool:
          vmImage: "windows-latest"
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: $(solution)

          - task: VSBuild@1
            inputs:
              solution: $(solution)
              msbuildArgs: >
                /p:DeployOnBuild=true
                /p:PublishProfile=FolderProfile
                /p:WebPublishMethod=FileSystem
                /p:PublishUrl="$(build.artifactStagingDirectory)/publish"
                /p:DeployDefaultTarget=WebPublish
              platform: $(buildPlatform)
              configuration: $(buildConfiguration)

          - task: VSTest@2
            inputs:
              platform: $(buildPlatform)
              configuration: $(buildConfiguration)

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(build.artifactStagingDirectory)
              ArtifactName: $(artifactName)

  # ===================================
  # 2Ô∏è‚É£ SMART TERRAFORM - BEZ WARNING√ìW
  # ===================================
  - stage: Infrastructure
    displayName: "Smart Infrastructure Management"
    dependsOn: Build
    jobs:
      - job: TerraformApply
        displayName: "Terraform Apply with Smart Import"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: |
              echo "Installing Terraform..."
              sudo apt-get update && sudo apt-get install -y unzip wget
              wget https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip
              unzip terraform_1.7.5_linux_amd64.zip
              sudo mv terraform /usr/local/bin/
              terraform -version
            displayName: "Install Terraform"

          - task: AzureCLI@2
            displayName: "Smart Terraform - Check State & Apply"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformWorkingDir)
              inlineScript: |
                echo "üöÄ Initializing Terraform..."
                terraform init

                echo "üîç Checking current Terraform state..."
                terraform state list > current_state.txt 2>/dev/null || echo "No existing state found"

                echo "üìã Current resources in state:"
                if [ -s current_state.txt ]; then
                  cat current_state.txt
                else
                  echo "State is empty - will attempt imports"
                fi

                # Function to check if resource exists in state
                resource_exists_in_state() {
                  local resource_name="$1"
                  if [ -s current_state.txt ] && grep -q "^${resource_name}$" current_state.txt; then
                    return 0  # exists
                  else
                    return 1  # doesn't exist
                  fi
                }

                echo "üîÑ Smart import - only import if not already in state..."

                # Import Resource Group (tylko je≈õli nie ma w state)
                if ! resource_exists_in_state "azurerm_resource_group.rg"; then
                  echo "‚¨áÔ∏è Importing Resource Group..."
                  terraform import azurerm_resource_group.rg /subscriptions/171eb711-b76d-49e7-a653-d91675596edb/resourceGroups/rg-game-backend || echo "‚ùå RG import failed - might not exist in Azure yet"
                else
                  echo "‚úÖ Resource Group already in state, skipping import"
                fi

                # Import Service Plan (tylko je≈õli nie ma w state)
                if ! resource_exists_in_state "azurerm_service_plan.app_plan"; then
                  echo "‚¨áÔ∏è Importing Service Plan..."
                  terraform import azurerm_service_plan.app_plan /subscriptions/171eb711-b76d-49e7-a653-d91675596edb/resourceGroups/rg-game-backend/providers/Microsoft.Web/serverFarms/game-backend-app-plan || echo "‚ùå Service Plan import failed - might not exist in Azure yet"
                else
                  echo "‚úÖ Service Plan already in state, skipping import"
                fi

                # Import Windows Web App (tylko je≈õli nie ma w state)
                if ! resource_exists_in_state "azurerm_windows_web_app.app_service"; then
                  echo "‚¨áÔ∏è Importing Windows Web App..."
                  terraform import azurerm_windows_web_app.app_service /subscriptions/171eb711-b76d-49e7-a653-d91675596edb/resourceGroups/rg-game-backend/providers/Microsoft.Web/sites/game-backend-app || echo "‚ùå Web App import failed - might not exist in Azure yet"
                else
                  echo "‚úÖ Web App already in state, skipping import"
                fi

                # Import Application Insights (tylko je≈õli nie ma w state)
                if ! resource_exists_in_state "azurerm_application_insights.app_insights"; then
                  echo "‚¨áÔ∏è Importing Application Insights..."
                  terraform import azurerm_application_insights.app_insights /subscriptions/171eb711-b76d-49e7-a653-d91675596edb/resourceGroups/rg-game-backend/providers/Microsoft.Insights/components/game-backend-app-insights || echo "‚ùå App Insights import failed - might not exist in Azure yet"
                else
                  echo "‚úÖ Application Insights already in state, skipping import"
                fi

                echo "üìä Planning Terraform changes..."
                terraform plan -out=tfplan

                echo "üöÄ Applying Terraform changes..."
                terraform apply -auto-approve tfplan

                echo "üìù Final state after apply:"
                terraform state list

  # ===================================
  # 3Ô∏è‚É£ DEPLOY DO AZURE APP SERVICE (Linux)
  # ===================================
  - stage: Deploy
    displayName: "Deploy Application to Azure App Service"
    dependsOn: Infrastructure
    jobs:
      - job: DeployWebApp
        displayName: "Deploy Web App"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: current
              downloadType: single
              artifactName: $(artifactName)
              downloadPath: $(System.ArtifactsDirectory)

          - script: |
              echo "=== DEBUG: Checking artifacts ==="
              echo "ArtifactsDirectory: $(System.ArtifactsDirectory)"
              echo "PackagePath: $(packagePath)"
              echo "Listing all files:"
              find $(System.ArtifactsDirectory) -type f -name "*" | head -20
              echo "Looking for publish folder:"
              find $(System.ArtifactsDirectory) -name "publish" -type d
              echo "Contents of publish folder:"
              find $(System.ArtifactsDirectory) -name "publish" -type d -exec ls -la {} \;
            displayName: "Debug: List artifacts"

          - task: AzureRmWebAppDeployment@4
            displayName: "Deploy App to Azure App Service"
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webApp
              WebAppName: "game-backend-app"
              Package: $(packagePath)

          - task: AzureCLI@2
            displayName: "Verify Deployment"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Verifying deployment..."
                APP_URL=$(az webapp show --name "game-backend-app" --resource-group "rg-game-backend" --query defaultHostName --output tsv)
                echo "Application URL: https://$APP_URL"
                echo "Testing endpoint..."
                curl -I "https://$APP_URL" || echo "App might still be starting up"

                echo "=== Deployment Summary ==="
                echo "‚úÖ Infrastructure: Managed by Terraform"
                echo "‚úÖ Application: Deployed to App Service"
                echo "‚úÖ Monitoring: Application Insights configured"
                echo "üåê Access your app at: https://$APP_URL"

                # Sprawd≈∫ Application Insights
                echo "üîç Checking Application Insights integration..."
                az monitor app-insights component show --app game-backend-app-insights --resource-group rg-game-backend --query "name" --output tsv || echo "App Insights check failed"
