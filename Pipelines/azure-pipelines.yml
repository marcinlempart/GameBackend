trigger:
  - master

pool:
  vmImage: "windows-latest"

variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  azureSubscription: "GameBackendServiceConnection"
  artifactName: "drop"
  terraformWorkingDir: "Terraform"
  packagePath: "$(System.ArtifactsDirectory)/$(artifactName)/**/*.zip"
  appServiceName: "game-backend-app"

stages:
  # üèóÔ∏è Build and Test Stage
  - stage: Build
    displayName: "Build and Test"
    jobs:
      - job: Build
        steps:
          # üõ†Ô∏è Install NuGet
          - task: NuGetToolInstaller@1

          # üì¶ Restore NuGet packages
          - task: NuGetCommand@2
            inputs:
              restoreSolution: "$(solution)"

          # üèóÔ∏è Build the solution and generate MSBuild ZIP package
          - task: VSBuild@1
            inputs:
              solution: "$(solution)"
              msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
              platform: "$(buildPlatform)"
              configuration: "$(buildConfiguration)"

          # ‚úÖ Run unit tests
          - task: VSTest@2
            inputs:
              platform: "$(buildPlatform)"
              configuration: "$(buildConfiguration)"

          # üì§ Publish build artifacts (MSBuild ZIP package)
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(build.artifactStagingDirectory)"
              ArtifactName: "$(artifactName)"

  # üå± Provision Infrastructure with Terraform
  - stage: Infrastructure
    displayName: "Provision Infrastructure with Terraform"
    dependsOn: Build
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: Terraform
        steps:
          # üõ†Ô∏è Install Terraform using the official task
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "latest"
            displayName: "Install Terraform"

          # üîê Azure CLI Login and Set Context
          - task: AzureCLI@2
            inputs:
              azureSubscription: "$(azureSubscription)"
              scriptType: "pscore"
              scriptLocation: "inlineScript"
              inlineScript: |
                # Verify Azure CLI is logged in and show account info
                az account show

                # Get subscription ID and set as environment variable
                $subscriptionId = az account show --query id --output tsv
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"

                Write-Host "Azure CLI authenticated successfully"
                Write-Host "Subscription ID: $subscriptionId"
            displayName: "Azure Authentication Setup"

          # üå± Terraform Init
          - task: AzureCLI@2
            inputs:
              azureSubscription: "$(azureSubscription)"
              scriptType: "pscore"
              scriptLocation: "inlineScript"
              workingDirectory: "$(terraformWorkingDir)"
              inlineScript: |
                Write-Host "Initializing Terraform..."
                terraform init
            displayName: "Terraform Init"

          # üìã Terraform Plan
          - task: AzureCLI@2
            inputs:
              azureSubscription: "$(azureSubscription)"
              scriptType: "pscore"
              scriptLocation: "inlineScript"
              workingDirectory: "$(terraformWorkingDir)"
              inlineScript: |
                Write-Host "Creating Terraform execution plan..."
                terraform plan -out=tfplan
            displayName: "Terraform Plan"

          # üöÄ Terraform Apply
          - task: AzureCLI@2
            inputs:
              azureSubscription: "$(azureSubscription)"
              scriptType: "pscore"
              scriptLocation: "inlineScript"
              workingDirectory: "$(terraformWorkingDir)"
              inlineScript: |
                Write-Host "Applying Terraform configuration..."
                terraform apply -auto-approve tfplan

                # Get outputs for use in deployment stage
                $appServiceName = terraform output -raw app_service_name
                $resourceGroupName = terraform output -raw resource_group_name

                Write-Host "##vso[task.setvariable variable=TERRAFORM_APP_SERVICE_NAME;isOutput=true]$appServiceName"
                Write-Host "##vso[task.setvariable variable=TERRAFORM_RESOURCE_GROUP_NAME;isOutput=true]$resourceGroupName"

                Write-Host "Infrastructure provisioned successfully"
                Write-Host "App Service Name: $appServiceName"
                Write-Host "Resource Group: $resourceGroupName"
            name: "terraformOutput"
            displayName: "Terraform Apply"

  # üöÄ Deploy Stage
  - stage: Deploy
    displayName: "Deploy to Azure App Service"
    dependsOn: Infrastructure
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: Deploy
        variables:
          appServiceName: $[ stageDependencies.Infrastructure.Terraform.outputs['terraformOutput.TERRAFORM_APP_SERVICE_NAME'] ]
          resourceGroupName: $[ stageDependencies.Infrastructure.Terraform.outputs['terraformOutput.TERRAFORM_RESOURCE_GROUP_NAME'] ]
        steps:
          # üì• Download build artifacts
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "$(artifactName)"
              downloadPath: "$(System.ArtifactsDirectory)"

          # üöÄ Deploy to Azure App Service
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: "AzureRM"
              azureSubscription: "$(azureSubscription)"
              appType: "webApp"
              WebAppName: "$(appServiceName)"
              ResourceGroupName: "$(resourceGroupName)"
              packageForLinux: "$(packagePath)"
              deployToSlotOrASE: false
            displayName: "Deploy to Azure App Service"

          # ‚úÖ Verify deployment
          - task: AzureCLI@2
            inputs:
              azureSubscription: "$(azureSubscription)"
              scriptType: "pscore"
              scriptLocation: "inlineScript"
              inlineScript: |
                Write-Host "Verifying deployment..."
                $appUrl = az webapp show --name $(appServiceName) --resource-group $(resourceGroupName) --query defaultHostName --output tsv
                Write-Host "Application URL: https://$appUrl"

                # Optional: Test if the application is responding
                try {
                  $response = Invoke-WebRequest -Uri "https://$appUrl" -TimeoutSec 30
                  Write-Host "Application is responding with status: $($response.StatusCode)"
                } catch {
                  Write-Warning "Could not verify application response: $($_.Exception.Message)"
                }
            displayName: "Verify Deployment"
